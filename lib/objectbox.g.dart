// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/user_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 3339068557406902246),
      name: 'UserEntity',
      lastPropertyId: const IdUid(9, 4980124125913536102),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2150143145526135742),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2981388368573008723),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8013501445026714347),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7674424030261055733),
            name: 'email',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 4468974331906762514)),
        ModelProperty(
            id: const IdUid(5, 17581517478860248),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5161330527610742289),
            name: 'birthDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4066979126796839690),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 402405334358543636),
            name: 'aboutSelf',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4980124125913536102),
            name: 'photo',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 3339068557406902246),
      lastIndexId: const IdUid(2, 4468974331906762514),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [3961228105275354077],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        4578667741301813103,
        8155562311328037008,
        5345989318646150098,
        5864948281853651209,
        4326161276990003800,
        3200622027495104526,
        1635947463854560266,
        7681992257252208153,
        2976189782941970288
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    UserEntity: EntityDefinition<UserEntity>(
        model: _entities[0],
        toOneRelations: (UserEntity object) => [],
        toManyRelations: (UserEntity object) => {},
        getId: (UserEntity object) => object.id,
        setId: (UserEntity object, int id) {
          object.id = id;
        },
        objectToFB: (UserEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final phoneOffset = fbb.writeString(object.phone);
          final emailOffset = fbb.writeString(object.email);
          final passwordOffset = fbb.writeString(object.password);
          final cityOffset = fbb.writeString(object.city);
          final aboutSelfOffset = fbb.writeString(object.aboutSelf);
          final photoOffset = fbb.writeString(object.photo);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, phoneOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, passwordOffset);
          fbb.addInt64(5, object.birthDate?.millisecondsSinceEpoch);
          fbb.addOffset(6, cityOffset);
          fbb.addOffset(7, aboutSelfOffset);
          fbb.addOffset(8, photoOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final birthDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = UserEntity(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              city: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              aboutSelf: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              photo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              birthDate: birthDateValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(birthDateValue));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [UserEntity] entity fields to define ObjectBox queries.
class UserEntity_ {
  /// see [UserEntity.id]
  static final id =
      QueryIntegerProperty<UserEntity>(_entities[0].properties[0]);

  /// see [UserEntity.name]
  static final name =
      QueryStringProperty<UserEntity>(_entities[0].properties[1]);

  /// see [UserEntity.phone]
  static final phone =
      QueryStringProperty<UserEntity>(_entities[0].properties[2]);

  /// see [UserEntity.email]
  static final email =
      QueryStringProperty<UserEntity>(_entities[0].properties[3]);

  /// see [UserEntity.password]
  static final password =
      QueryStringProperty<UserEntity>(_entities[0].properties[4]);

  /// see [UserEntity.birthDate]
  static final birthDate =
      QueryIntegerProperty<UserEntity>(_entities[0].properties[5]);

  /// see [UserEntity.city]
  static final city =
      QueryStringProperty<UserEntity>(_entities[0].properties[6]);

  /// see [UserEntity.aboutSelf]
  static final aboutSelf =
      QueryStringProperty<UserEntity>(_entities[0].properties[7]);

  /// see [UserEntity.photo]
  static final photo =
      QueryStringProperty<UserEntity>(_entities[0].properties[8]);
}
